module TOP(
	input wire s0,
	input wire s1,
	input wire s2,
	input wire clki,
	output wire clko,
	output wire stb,
	output wire dio
    );
wire clk_khz,clk_hz;
wire [3:0] one0,ten0,hundred0,one1,ten1,hundred1;
wire [7:0] out_counter,out0,out1;
Clock_Div clock (.clk(clki),.clk_hz(clk_hz),.clk_khz(clk_khz));
COUNTER counter (.clk(clk_hz),.s0(s0),.s1(s1),.out(out_counter));
ChooseLed choose (.data(out_counter),.s2(s2),.out0(out0),.out1(out1));
HEX_BCD hex_out0 (.hex(out0),.ones(one0),.tens(ten0),.hundreds(hundred0));
HEX_BCD hex_out1 (.hex(out1),.ones(one1),.tens(ten1),.hundreds(hundred1));

TM1638 tm (.seg0(hundred0),.seg1(ten0),.seg2(one0),.seg5(hundred1),.seg6(ten1),.seg7(one1),
.clkinput(clk_khz),
 .clk(clko),
 .stb(stb),
 .dio(dio)
 );
endmodule


module Clock_Div(
input wire clk,
output reg clk_hz,
output reg clk_khz
    );
initial
begin
clk_hz = 0;
clk_khz = 0;
end
integer cnt_0 = 0;
integer cnt_1 = 0;
always@(posedge clk)
	if(cnt_0 == 32)
		begin 
			clk_khz= ~clk_khz; 
			cnt_0 =0;
		end//800khz 
	else 
		cnt_0 =cnt_0 + 1;
	
	
always@(posedge clk)
	if(cnt_1 == 25_000_000)
		begin 
			clk_hz= ~clk_hz; 
			cnt_1 =0;
		end //1hz
	else 
		cnt_1 = cnt_1+1;
endmodule



module COUNTER(
input wire clk,
input wire s0,
input wire s1,
output reg [7:0]out
 );
 
initial
begin
	out = 0;
end

always@(posedge clk)
begin
	if(s1)
		out = out;
	else
		if(s0)
			out = out + 1;
		else
			out = out - 1;
end 
endmodule



module ChooseLed(
	input [7:0] data,
	input s2,
	output reg [7:0] out0,
	output reg [7:0] out1
   );
always@(posedge s2)
begin
	if(s2)
		begin
		out0 = data;
		out1 = 8'b0000_0000;
		end
	else
		begin
		out0 = 8'b0000_0000;
		out1 = data;
		end

end

endmodule



module HEX_BCD(
input [7:0] hex,
output wire [3:0] ones,
output wire [3:0] tens,
output wire [3:0] hundreds
    );
wire [3:0] c1,c2,c3,c4,c5,c6,c7;
wire [3:0] d1,d2,d3,d4,d5,d6,d7;
assign d1 = {1'b0,hex[7:5]};
assign d2 = {c1[2:0],hex[4]};
assign d3 = {c2[2:0],hex[3]};
assign d4 = {c3[2:0],hex[2]};
assign d5 = {c4[2:0],hex[1]};
assign d6 = {1'b0,c1[3],c2[3],c3[3]};
assign d7 = {c6[2:0],c4[3]};
add3 m1(d1,c1);
add3 m2(d2,c2);
add3 m3(d3,c3);
add3 m4(d4,c4);
add3 m5(d5,c5);
add3 m6(d6,c6);
add3 m7(d7,c7);
assign ones = {c5[2:0],hex[0]};
assign tens = {c7[2:0],c5[3]};
assign hundreds = {c6[3],c7[3]};
endmodule


module add3(in,out);
input [3:0] in;
output [3:0] out;
reg [3:0] out;
always @ (in)
case (in)
4'b0000: out <= 4'b0000;
4'b0001: out <= 4'b0001;
4'b0010: out <= 4'b0010;
4'b0011: out <= 4'b0011;
4'b0100: out <= 4'b0100;
4'b0101: out <= 4'b1000;
4'b0110: out <= 4'b1001;
4'b0111: out <= 4'b1010;
4'b1000: out <= 4'b1011;
4'b1001: out <= 4'b1100;
default: out <= 4'b0000;
endcase
endmodule